using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GestDepLib.Persistence;
using GestDepLib.BusinessLogic;
using GestDepLib.Entities;
using GestDepLib.BusinessLogic.Services;

namespace getFreeLanes___Test
{
    class Program
    {
        static void Main(string[] args)
        {

            try
            {
                IGestDepService service = 
                    new GestDepService(new EntityFrameworkDAL(new GestDepDbContext()));

                new Program(service);
            }
            catch (Exception e)
            {
                printError(e);
            }
            Console.WriteLine("test");
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
        }
        private IGestDepService service;
        Program(IGestDepService service)
        {
            this.service = service;
            service.removeAllData();
            creaPiscina(3);
            Console.WriteLine("Press any key to continue...\n\n");
            Console.ReadKey();
            Course c = creaCurso("curso1");
            Console.WriteLine("Press any key to continue...\n\n");
            Console.ReadKey();
            añadeLanesACurso(c);
            Console.WriteLine("Press any key to continue...\n\n");
            Console.ReadKey();
            List<DateTime> fechas = calculaFechasCurso(c);
            Console.WriteLine("Press any key to continue...\n\n");
            Console.ReadKey();
            bool haySolapamiento = calculaSolapamiento(c, service.findPoolById(1));
            Console.WriteLine("Press any key to continue...\n\n");
            Console.ReadKey();
            if (!haySolapamiento)
            {
                añadeCursoAPiscina(c, service.findPoolById(1));
            }
            else { Console.WriteLine("No se añadió porque se solapaban"); }
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey();
            //-------------------------------------------------------
            //Console.WriteLine("Press any key to continue...");
            //Console.ReadKey();
            //Course c1 = creaCurso("curso2");
            //Console.WriteLine("Press any key to continue...");
            //Console.ReadKey();
            //añadeLanesACurso(c1);
            //Console.WriteLine("Press any key to continue...");
            //Console.ReadKey();
            //añadeCursoAPiscina(c1, service.findPoolById(1));
            //Console.WriteLine("Press any key to continue...");
            //Console.ReadKey();


        }

        void creaPiscina(int numLanes)
        {
            Console.WriteLine();
            Console.WriteLine("ADDING POOL AND LANES...");

            try
            {
                // Pool(int id, DateTime OpeningHour, DateTime ClosingHour, int ZipCode, int discountLocal, int discountRetired, double freeSwimPrice)
                // Id is not autogenerated
                Pool pool = new Pool(1, Convert.ToDateTime("08:00:00"), Convert.ToDateTime("14:00:00"), 46122, 5, 5, 2.00);
                for (int i = 1; i < numLanes; i++)
                {
                    pool.addLane(new Lane(i));
                }
                service.addPool(pool);
                service.saveChanges();

                foreach (Pool p in service.getAllPools())
                {
                    Console.WriteLine(" Pool " + p.Id);
                    foreach (Lane l in p.Lanes)
                        Console.WriteLine("   Lane " + l.Number);
                }

            }
            catch (Exception e)
            {
                printError(e);
            }
            
        }
        Course creaCurso(string nom)
        {
            Console.WriteLine();
            Console.WriteLine("Creando Curso...");

            

                try
                {
                    // Course(String description, DateTime startDate, DateTime finishDate, DateTime startHour, TimeSpan duration, Days courseDays, int minimunEnrollments, int maximunEnrollments, bool cancelled, double price)
                    Course c = new Course(nom, new DateTime(2017, 9, 4),
                        new DateTime(2018, 6, 29), Convert.ToDateTime("09:30:00"),
                        new TimeSpan(0, 45, 0),
                                      Days.Monday | Days.Wednesday | Days.Friday,
                                      6, 20, false, 100);
                Console.WriteLine("Curso creado\n Fecha Inicio: " + c.StartDate + "\nFecha Fin: " + c.FinishDate);
                Console.WriteLine("Hora Inicio: " + c.StartHour + "\nDuracion: " + c.Duration);
                Console.WriteLine("Dias que se imparte:" + c.CourseDays);
                Console.WriteLine("StartHour + duration (Fisnish Hour) = " + c.StartHour.Add(c.Duration));
                Console.WriteLine("numero de calles asignadas "+c.Lanes.Count());
                Console.WriteLine("Descripcion/nombre Curso =" + c.Description);
                string st = "Lanes = [";
                foreach (Lane l in c.Lanes) { st+= + l.Number; }
                st +="]";
                Console.WriteLine("calles asignadas " + st);
                return c;
            }
                catch (Exception e)
                {
                
                    printError(e);
                    return null;
            }

            }

        void añadeLanesACurso(Course c)
        {
            Console.WriteLine();
            Console.WriteLine("Añadiendo Lanes 1 y 2...");



            try
            {
                Pool pool = service.findPoolById(1);
                
                c.addLane(pool.findLane(1));
                c.addLane(pool.findLane(2));
                string st = "= [";
                foreach (Lane l in c.Lanes) { st += +l.Number+","; }
                st = st.Substring(0,st.Length-1);
                st += "]";
                Console.WriteLine("calles asignadas " + st);

            }
            catch (Exception e)
            {
                printError(e);
            }

        }
        List<DateTime> calculaFechasCurso(Course c)
        {
            try
            {
                Console.WriteLine("Calculando Fechas del curso " + c.Description + "...");
                List<DateTime> listaFechas = c.getDias();
                return listaFechas;
            }
            catch (Exception e)
            {
                printError(e);
                return null;
            }
        }
        public void añadeCursoAPiscina(Course c,Pool p)
        {
            try
            {
                List<DateTime> l= c.getDias();
                Dictionary<Lane, int> d = c.getLanesDictionary();
                foreach (DateTime diaConHora in l) {
                    p.insertarEntrada(diaConHora, d);
                }
                
                Console.WriteLine("Añadiendo curso " + c.Description +" a piscina "+p.Id+ "...");
                 service.addCourse(c);
                service.saveChanges();

            }
            catch (Exception e)
            {
                printError(e);
            }
        }

        bool calculaSolapamiento(Course c,Pool p)
        {
            try
            {
                Console.WriteLine("Comprobando solapamiento del curso c " + c.Description + "con la piscina "+p.Id+"...");
                List<DateTime> listaSolapadas = new List<DateTime>();
                List<DateTime> listaFechas = c.getDias();
                Dictionary<Lane,int> dicLane =c.getLanesDictionary();
                int cont = 0;
                bool solap;

                foreach (DateTime fechaConHora in listaFechas)
                {
                    if (!p.compruebaSolapamientoEntrada(fechaConHora, dicLane))
                    {
                        listaSolapadas.Add(fechaConHora);
                    }
                    else { cont++; }
                }
                if (cont == 0)
                {
                    solap = false;
                    Console.WriteLine("Se Comprobaron todas las fechas con exito");
                }
                else
                {
                    solap = true;
                    Console.WriteLine("No se añadió ninguna fecha porque hubo " + (cont) + "solapamientos");
                    Console.WriteLine("Los solapamientos se produjeron en " + listaSolapadas.ToString());
                }
                return solap;
            }
            catch (Exception e)
            {
                printError(e);
                return true;
            }
        }

        static void printError(Exception e)
        {
            while (e != null)
            {
                Console.WriteLine("ERROR: " + e.Message);
                e = e.InnerException;
            }
        }
    }
}